# name: EnV-if-file
# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         type: choice
#         description: this is for testing
#         options:
#           - prod
#           - stage
#           - dev
#         default: prod
# jobs:
#   SET-env:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Set ENV_NAME to production if input is prod
#       if: ${{ github.event.inputs.environment == 'prod' }}
#       run: echo "ENV_NAME=production" >> $GITHUB_ENV

#     - name: Set ENV_NAME to staging if not prod
#       if: ${{ github.event.inputs.target != 'prod' }}
#       run: echo "ENV_NAME=staging" >> $GITHUB_ENV

#     - name: Print final ENV_NAME
#       run: echo "ENV_NAME is $ENV_NAME"
     
name: Global Env via Job Outputs

# on:
#   workflow_dispatch:
#     inputs:
      # first:
      #   description: "Target environment"
      #   required: true
      #   #default: ''
      #   type: choice
      #   options:
      #     - dev
      #     - prod
      # second:
      #   description: "Target environment"
      #   required: true
      #   #default: ''
      #   type: choice
      #   options:
      #     - one
      #     - two
      # buildnumber:
      #  description: build number
      #  reqired: true
      #  default: test.2025
on:
  push:
    branches:
      - master

jobs:
  # setup:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     env_name: ${{ steps.setenv.outputs.env_name }}
  #     env_one: ${{ steps.setenv1.outputs.env_one}}
  #     # env_buildnumber: ${{ steps.setbuild.outputs.env_buildnumber}}
  #   steps:
      # - name: Set ENV_NAME based on input
      #   id: setenv
      #   run: |
      #     if [[ "${{ github.event.inputs.first }}" == "prod" ]]; then
      #       echo "env_name=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "env_name=false" >> $GITHUB_OUTPUT
      #     fi
      # - name: Set ENV_NAME based on input
      #   id: setenv1
      #   run: |
      #     if [[ "${{ github.event.inputs.second }}" == "one" ]]; then
      #       echo "env_one=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "env_one=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Set build number
      #   id: setbuild
      #   run: |
      #     run: echo "BUILD_ID=${{ github.event.inputs.buildnumber }}-${{ github.run_number }}" >> $GITHUB
          

  # use-env:
  #   runs-on: ubuntu-latest
  #   needs: setup
  #   env:
  #     # ENV_NAME: ${{ needs.setup.outputs.env_name }}
  #     # ENV_ONE: ${{ needs.setup.outputs.env_one}}
  #     ENV_BUILD: ${{needs.setup.outputs.env_buildnumber}}
  #   steps:
  #     # - name: Print the environment name
  #     - name: print build number
  #       run: |
  #         # echo "Using ENV_NAME: $ENV_NAME"
  #         # echo "Using ENV_ONE: $ENV_ONE"
  #         echo "build numer is : $BUILD_ID"
  #----------------------------------------------------------------
  build:
    runs-on: windows-latest
    env:
      BUILD_NUMBER: custom-${{ github.run_number }}
    steps:
      shell: bash
      - name: Print custom build number
        run: echo "Build Number is $BUILD_NUMBER"